#include <cstdlib>
#include <cstdio>
#include <algorithm>
using namespace std;int ABS_BEST;int L [10001];int R [10000];int LVL[301][301][2];int DP[301][301][2];bool coordinates[20001];int N, M;int rightIdx, leftIdx;void rek(int lvl, int drops, int left, int right, int loc, int ch);int main(int argc, char **argv) {scanf("%d", &N);scanf("%d", &M);for (int i = 0; i < N; i++) {int idx;scanf("%d", &idx);idx += 10000;coordinates[idx] = true;if (idx < 10001) {L[leftIdx] = idx;leftIdx++;} else {R[rightIdx] = idx;rightIdx++;}}for (int i = rightIdx; i < 10000; i++) {R[i] = 1000000;}for (int i = leftIdx; i < 10001; i++) {L[i] = 1000000;}sort(L, L + 10001);sort(R, R + 10000);if (coordinates[10000]) {rek(M, M, 1, 0, 10000, 1);} else {rek(M, 0, 0, 0, 10000, 1);}printf("%d", ABS_BEST);}void rek(int lvl, int drops, int left, int right, int loc, int ch) {if (lvl < 0) {return;}if (LVL[left][right][ch] >= lvl && DP[left][right][ch] >= drops) {return;}if (lvl > LVL[left][right][ch] && drops > DP[left][right][ch]) {LVL[left][right][ch] = lvl;DP[left][right][ch] = drops;}if (drops > ABS_BEST) {ABS_BEST = drops;}if (lvl == 0) {return;}int count = leftIdx -left -1;if (left < leftIdx) {int i = lvl -abs(loc -L[count]);rek(i, drops + i, left + 1, right, L[count], 1);}count = right;if (count < rightIdx) {int i = lvl -abs(loc -R[count]);rek(i, drops + i, left, right + 1, R[count], 0);}}

